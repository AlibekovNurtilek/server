from datetime import date, datetime
from typing import Optional, List
from sqlalchemy import (
    String, Integer, Date, DateTime, ForeignKey, Numeric, Enum, Text
)
from sqlalchemy.orm import Mapped, mapped_column, relationship
import enum

from app.db.base import Base


# ========================
# ENUM'—ã ‚Äî —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏ –∑–Ω–∞—á–µ–Ω–∏–π
# ========================

class AccountType(str, enum.Enum):
    """–¢–∏–ø –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ —Å—á—ë—Ç–∞"""
    current = "current"       # —Ç–µ–∫—É—â–∏–π —Å—á—ë—Ç
    savings = "savings"       # —Å–±–µ—Ä–µ–≥–∞—Ç–µ–ª—å–Ω—ã–π
    credit = "credit"         # –∫—Ä–µ–¥–∏—Ç–Ω—ã–π

class AccountStatus(str, enum.Enum):
    """–°—Ç–∞—Ç—É—Å –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ —Å—á—ë—Ç–∞"""
    active = "active"         # –∞–∫—Ç–∏–≤–µ–Ω
    frozen = "frozen"         # –∑–∞–º–æ—Ä–æ–∂–µ–Ω
    closed = "closed"         # –∑–∞–∫—Ä—ã—Ç

class CardType(str, enum.Enum):
    """–¢–∏–ø –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç—ã"""
    debit = "debit"           # –¥–µ–±–µ—Ç–æ–≤–∞—è
    credit = "credit"         # –∫—Ä–µ–¥–∏—Ç–Ω–∞—è

class CardStatus(str, enum.Enum):
    """–°—Ç–∞—Ç—É—Å –∫–∞—Ä—Ç—ã"""
    active = "active"         # –∞–∫—Ç–∏–≤–Ω–∞
    blocked = "blocked"       # –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞
    expired = "expired"       # –∏—Å—Ç–µ–∫ —Å—Ä–æ–∫

class TransactionType(str, enum.Enum):
    """–¢–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
    deposit = "deposit"       # –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ
    withdrawal = "withdrawal" # —Å–Ω—è—Ç–∏–µ
    transfer = "transfer"     # –ø–µ—Ä–µ–≤–æ–¥
    payment = "payment"       # –æ–ø–ª–∞—Ç–∞

class TransactionStatus(str, enum.Enum):
    """–°—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
    pending = "pending"       # –≤ –æ–∂–∏–¥–∞–Ω–∏–∏
    completed = "completed"   # –∑–∞–≤–µ—Ä—à–µ–Ω–∞
    failed = "failed"         # –æ—à–∏–±–∫–∞

class LoanType(str, enum.Enum):
    """–¢–∏–ø –∫—Ä–µ–¥–∏—Ç–∞"""
    personal = "personal"     # –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å—Å–∫–∏–π
    mortgage = "mortgage"     # –∏–ø–æ—Ç–µ–∫–∞
    auto = "auto"             # –∞–≤—Ç–æ–∫—Ä–µ–¥–∏—Ç
    business = "business"     # –±–∏–∑–Ω–µ—Å-–∫—Ä–µ–¥–∏—Ç

class LoanStatus(str, enum.Enum):
    """–°—Ç–∞—Ç—É—Å –∫—Ä–µ–¥–∏—Ç–∞"""
    active = "active"         # –∞–∫—Ç–∏–≤–µ–Ω
    closed = "closed"         # –ø–æ–≥–∞—à–µ–Ω
    defaulted = "defaulted"   # –ø—Ä–æ—Å—Ä–æ—á–µ–Ω

class PaymentStatus(str, enum.Enum):
    """–°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞"""
    pending = "pending"       # –≤ –æ–∂–∏–¥–∞–Ω–∏–∏
    completed = "completed"   # –∑–∞–≤–µ—Ä—à–µ–Ω

class EmployeeRole(str, enum.Enum):
    """–†–æ–ª—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –≤ —Å–∏—Å—Ç–µ–º–µ"""
    admin = "admin"           # –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
    manager = "manager"       # –º–µ–Ω–µ–¥–∂–µ—Ä
    support = "support"       # –ø–æ–¥–¥–µ—Ä–∂–∫–∞
    auditor = "auditor"       # –∞—É–¥–∏—Ç

class ChatStatus(str, enum.Enum):
    open = "open"         # –ß–∞—Ç –∞–∫—Ç–∏–≤–µ–Ω
    closed = "closed"     # –ß–∞—Ç –∑–∞–∫—Ä—ã—Ç
    archived = "archived" # –ß–∞—Ç –≤ –∞—Ä—Ö–∏–≤–µ

class MessageRole(str, enum.Enum):
    user = "user"           # –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    assistant = "assistant" # –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
    system = "system"       # –°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ


# ========================
# –¢–∞–±–ª–∏—Ü—ã
# ========================

class Customer(Base):

    __tablename__ = "customers"

    id: Mapped[int] = mapped_column(Integer, primary_key=True)
    first_name: Mapped[str] = mapped_column(String(100), nullable=False)
    last_name: Mapped[str] = mapped_column(String(100), nullable=False)
    middle_name: Mapped[Optional[str]] = mapped_column(String(100))  # –û—Ç—á–µ—Å—Ç–≤–æ
    birth_date: Mapped[date]
    passport_number: Mapped[str] = mapped_column(String(50), unique=True)
    phone_number: Mapped[str] = mapped_column(String(20))
    email: Mapped[str] = mapped_column(String(255), unique=True)
    address: Mapped[str] = mapped_column(Text)  # –ü–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è/—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    password_hash: Mapped[str] = mapped_column(String(255))  # –•—ç—à –ø–∞—Ä–æ–ª—è (–Ω–µ —Ö—Ä–∞–Ω–∏—Ç—å –≤ –æ—Ç–∫—Ä—ã—Ç–æ–º –≤–∏–¥–µ!)

    created_at: Mapped[datetime] = mapped_column(DateTime, default=datetime.utcnow)
    updated_at: Mapped[datetime] = mapped_column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)

    # –°–≤—è–∑–∏
    accounts: Mapped[List["Account"]] = relationship(back_populates="customer")
    loans: Mapped[List["Loan"]] = relationship(back_populates="customer")
    chats: Mapped[List["Chat"]] = relationship(back_populates="customer")


class Account(Base):

    __tablename__ = "accounts"

    id: Mapped[int] = mapped_column(Integer, primary_key=True)
    customer_id: Mapped[int] = mapped_column(ForeignKey("customers.id"))
    account_number: Mapped[str] = mapped_column(String(34), unique=True)  # IBAN
    account_type: Mapped[AccountType] = mapped_column(Enum(AccountType))
    currency: Mapped[str] = mapped_column(String(3))  # ISO –∫–æ–¥ –≤–∞–ª—é—Ç—ã
    balance: Mapped[Numeric] = mapped_column(Numeric(18, 2), default=0)
    status: Mapped[AccountStatus] = mapped_column(Enum(AccountStatus), default=AccountStatus.active)

    created_at: Mapped[datetime] = mapped_column(DateTime, default=datetime.utcnow)
    updated_at: Mapped[datetime] = mapped_column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)

    # –°–≤—è–∑–∏
    customer: Mapped["Customer"] = relationship(back_populates="accounts")
    cards: Mapped[List["Card"]] = relationship(back_populates="account")

    # üîπ –†–∞–∑–¥–µ–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–∞ –∏—Å—Ö–æ–¥—è—â–∏–µ –∏ –≤—Ö–æ–¥—è—â–∏–µ.
    outgoing_transactions: Mapped[List["Transaction"]] = relationship(
        "Transaction",
        back_populates="from_account",
        foreign_keys="Transaction.from_account_id",
        # –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å overlaps, –µ—Å–ª–∏ –≥–¥–µ-—Ç–æ –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç—Å—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:
        # overlaps="incoming_transactions,to_account"
    )
    incoming_transactions: Mapped[List["Transaction"]] = relationship(
        "Transaction",
        back_populates="to_account",
        foreign_keys="Transaction.to_account_id",
        # overlaps="outgoing_transactions,from_account"
    )

class Card(Base):

    __tablename__ = "cards"

    id: Mapped[int] = mapped_column(Integer, primary_key=True)
    account_id: Mapped[int] = mapped_column(ForeignKey("accounts.id"))
    card_number: Mapped[str] = mapped_column(String(16), unique=True)  # –í —Ä–µ–∞–ª—å–Ω–æ–º –±–∞–Ω–∫–µ ‚Äî —Ö—Ä–∞–Ω–∏—Ç—å –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ
    card_type: Mapped[CardType] = mapped_column(Enum(CardType))
    expiration_date: Mapped[date]
    status: Mapped[CardStatus] = mapped_column(Enum(CardStatus), default=CardStatus.active)

    created_at: Mapped[datetime] = mapped_column(DateTime, default=datetime.utcnow)
    updated_at: Mapped[datetime] = mapped_column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)

    # –°–≤—è–∑—å —Å –∞–∫–∫–∞—É–Ω—Ç–æ–º
    account: Mapped["Account"] = relationship(back_populates="cards")


# --- Transaction ---
class Transaction(Base):

    __tablename__ = "transactions"

    id: Mapped[int] = mapped_column(Integer, primary_key=True)

    # –Ø–≤–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫/–ø–æ–ª—É—á–∞—Ç–µ–ª—å
    from_account_id: Mapped[Optional[int]] = mapped_column(
        ForeignKey("accounts.id"), nullable=True, index=True
    )
    to_account_id: Mapped[Optional[int]] = mapped_column(
        ForeignKey("accounts.id"), nullable=True, index=True
    )

    transaction_type: Mapped[TransactionType] = mapped_column(Enum(TransactionType))
    amount: Mapped[Numeric] = mapped_column(Numeric(18, 2))
    currency: Mapped[str] = mapped_column(String(3))
    description: Mapped[Optional[str]] = mapped_column(Text)
    status: Mapped[TransactionStatus] = mapped_column(
        Enum(TransactionStatus), default=TransactionStatus.pending
    )

    created_at: Mapped[datetime] = mapped_column(DateTime, default=datetime.utcnow)
    updated_at: Mapped[datetime] = mapped_column(
        DateTime, default=datetime.utcnow, onupdate=datetime.utcnow
    )

    # üîπ –†–ê–ù–¨–®–ï –±—ã–ª–æ —Ç–∞–∫ (–¢–ï–ü–ï–†–¨ –£–î–ê–õ–Ø–ï–ú):
    # account: Mapped["Account"] = relationship(back_populates="transactions")

    # üîπ –¢–ï–ü–ï–†–¨ –¥–≤–µ —è–≤–Ω—ã–µ —Å–≤—è–∑–∏ c —É–∫–∞–∑–∞–Ω–∏–µ–º foreign_keys:
    from_account: Mapped[Optional["Account"]] = relationship(
        "Account",
        back_populates="outgoing_transactions",
        foreign_keys=[from_account_id],
    )
    to_account: Mapped[Optional["Account"]] = relationship(
        "Account",
        back_populates="incoming_transactions",
        foreign_keys=[to_account_id],
    )



class Loan(Base):
    """
    –ö—Ä–µ–¥–∏—Ç—ã, –≤—ã–¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞–º
    """
    __tablename__ = "loans"

    id: Mapped[int] = mapped_column(Integer, primary_key=True)
    customer_id: Mapped[int] = mapped_column(ForeignKey("customers.id"))
    loan_type: Mapped[LoanType] = mapped_column(Enum(LoanType))
    principal_amount: Mapped[Numeric] = mapped_column(Numeric(18, 2))  # –°—É–º–º–∞ –∫—Ä–µ–¥–∏—Ç–∞
    interest_rate: Mapped[Numeric] = mapped_column(Numeric(5, 2))      # –ü—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞
    start_date: Mapped[date]
    end_date: Mapped[date]
    status: Mapped[LoanStatus] = mapped_column(Enum(LoanStatus), default=LoanStatus.active)

    created_at: Mapped[datetime] = mapped_column(DateTime, default=datetime.utcnow)
    updated_at: Mapped[datetime] = mapped_column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)

    # –°–≤—è–∑–∏
    customer: Mapped["Customer"] = relationship(back_populates="loans")
    payments: Mapped[List["LoanPayment"]] = relationship(back_populates="loan")


class LoanPayment(Base):
    """
    –ü–ª–∞—Ç–µ–∂–∏ –ø–æ –∫—Ä–µ–¥–∏—Ç–∞–º
    """
    __tablename__ = "loan_payments"

    id: Mapped[int] = mapped_column(Integer, primary_key=True)
    loan_id: Mapped[int] = mapped_column(ForeignKey("loans.id"))
    amount: Mapped[Numeric] = mapped_column(Numeric(18, 2))  # –°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞
    payment_date: Mapped[date]
    status: Mapped[PaymentStatus] = mapped_column(Enum(PaymentStatus), default=PaymentStatus.pending)

    created_at: Mapped[datetime] = mapped_column(DateTime, default=datetime.utcnow)

    # –°–≤—è–∑—å —Å –∫—Ä–µ–¥–∏—Ç–æ–º
    loan: Mapped["Loan"] = relationship(back_populates="payments")


class Employee(Base):
    """
    –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –±–∞–Ω–∫–∞ (–≤–º–µ—Å—Ç–æ —Ç–∞–±–ª–∏—Ü—ã users)
    """
    __tablename__ = "employees"

    id: Mapped[int] = mapped_column(Integer, primary_key=True)
    username: Mapped[str] = mapped_column(String(50), unique=True)
    password_hash: Mapped[str] = mapped_column(String(255))  # –•—ç—à –ø–∞—Ä–æ–ª—è (–Ω–µ —Ö—Ä–∞–Ω–∏—Ç—å –≤ –æ—Ç–∫—Ä—ã—Ç–æ–º –≤–∏–¥–µ!)
    role: Mapped[EmployeeRole] = mapped_column(Enum(EmployeeRole), default=EmployeeRole.support)

    created_at: Mapped[datetime] = mapped_column(DateTime, default=datetime.utcnow)
    updated_at: Mapped[datetime] = mapped_column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)

    # –°–≤—è–∑–∏
    chats: Mapped[List["Chat"]] = relationship(back_populates="agent")


class Chat(Base):
    """
    –ß–∞—Ç –º–µ–∂–¥—É –∫–ª–∏–µ–Ω—Ç–æ–º –∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º
    """
    __tablename__ = "chats"

    id: Mapped[int] = mapped_column(Integer, primary_key=True)
    title: Mapped[Optional[str]] = mapped_column(String(255))
    customer_id: Mapped[Optional[int]] = mapped_column(ForeignKey("customers.id"))
    agent_id: Mapped[Optional[int]] = mapped_column(ForeignKey("employees.id"))
    status: Mapped[ChatStatus] = mapped_column(Enum(ChatStatus), default=ChatStatus.open)
    created_at: Mapped[datetime] = mapped_column(DateTime, default=datetime.utcnow)
    updated_at: Mapped[datetime] = mapped_column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)

    # –°–≤—è–∑–∏
    messages: Mapped[List["Message"]] = relationship(back_populates="chat", cascade="all, delete-orphan")
    customer: Mapped[Optional["Customer"]] = relationship(back_populates="chats")
    agent: Mapped[Optional["Employee"]] = relationship(back_populates="chats")


class Message(Base):
    """
    –°–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ
    """
    __tablename__ = "messages"

    id: Mapped[int] = mapped_column(Integer, primary_key=True)
    chat_id: Mapped[int] = mapped_column(ForeignKey("chats.id"))
    role: Mapped[MessageRole] = mapped_column(Enum(MessageRole))
    content: Mapped[str] = mapped_column(Text)
    created_at: Mapped[datetime] = mapped_column(DateTime, default=datetime.utcnow)

    # –°–≤—è–∑—å —Å —á–∞—Ç–æ–º
    chat: Mapped["Chat"] = relationship(back_populates="messages")
