from __future__ import annotations
import asyncio
import os
import sys
from logging.config import fileConfig

from sqlalchemy import pool
from sqlalchemy.ext.asyncio import async_engine_from_config

from alembic import context

# --- –ß—Ç–æ–±—ã Alembic –≤–∏–¥–µ–ª –Ω–∞—à–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ---
BASE_DIR = os.path.dirname(os.path.dirname(__file__))
if BASE_DIR not in sys.path:
    sys.path.insert(0, BASE_DIR)

from app.settings import settings
from app.db.base import Base
import app.db.models  # üëà –≤–∞–∂–Ω–æ: –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏, —á—Ç–æ–±—ã Alembic –∏—Ö —É–≤–∏–¥–µ–ª

# –≠—Ç–æ—Ç –æ–±—ä–µ–∫—Ç config –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω—ã–º –∏–∑ alembic.ini
config = context.config

# –ó–∞–º–µ–Ω–∏–º URL –∏–∑ alembic.ini –Ω–∞ —Ç–æ—Ç, —á—Ç–æ –≤ settings
config.set_main_option("sqlalchemy.url", settings.database_url)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
if config.config_file_name is not None:
    fileConfig(config.config_file_name)

target_metadata = Base.metadata

def run_migrations_offline() -> None:
    """–ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–π –≤ offline-—Ä–µ–∂–∏–º–µ."""
    url = config.get_main_option("sqlalchemy.url")
    context.configure(
        url=url,
        target_metadata=target_metadata,
        literal_binds=True,
        dialect_opts={"paramstyle": "named"},
    )
    with context.begin_transaction():
        context.run_migrations()

def do_run_migrations(connection):
    context.configure(connection=connection, target_metadata=target_metadata)
    with context.begin_transaction():
        context.run_migrations()

async def run_migrations_online() -> None:
    """–ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–π –≤ online-—Ä–µ–∂–∏–º–µ (async)."""
    connectable = async_engine_from_config(
        config.get_section(config.config_ini_section),
        prefix="sqlalchemy.",
        poolclass=pool.NullPool,
    )
    async with connectable.connect() as connection:
        await connection.run_sync(do_run_migrations)
    await connectable.dispose()

if context.is_offline_mode():
    run_migrations_offline()
else:
    asyncio.run(run_migrations_online())
 